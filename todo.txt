Short Term: 
    send websocket message so that all clients know when one user folds (for visual effect)
    see how often playerslots re-renders during a game, big chance for optimization here through memoization

    Use memo in PlayerSlot to not re-render unless props have changed

    Check out how often Actions.js renders.
    Check if highestBet in actions.js updates every turn. (i.e. updates even if highestBet is changed to the same value)

    Test turn-taking order with other poker app

    Make users_logged array to see users currently logged in
        -When logging in, see if user is already online, if so, do not give login token.
    Ping users to see if online, 30 min timeout maybe?




Bugs:


     

Long Term:
1. Figure out basics of how React works with the HTML and the React DOM
2. Learn how to sqlite with node (DONE)
3. Implement token authentication when user wants to do anything (mostly withdraw chips or play)
4. Figure out a way to reduce the number of db calls overall
5. Map out how a poker game would go out and build from beginning to end.
6. Figure out how to highlight actions one can take, and gray out invalid options
7. add toggle functions to actions (fold, call, check)

Important Tips:
1. Localstorage and Sessionstorage can be edited manually. You need to hash.
2. Promises are not rejected unless the returned promise value is read. (pretty sure)
3. Know the difference between encoding and hashing. I should hash the login token, but i should encode things stored in local storage.

Ideas:
1. For safety, I must send each card on the board on time, rather than at once. We can still have the identity of the deck server-side.
2. User can "join game", either says it's full or puts user into the game, assets can be seen even if not in game (no harm)
3. When user joins game, user is put into pool of players, and is put into the games thereafter.
4. If a user does not press an option (call, bet, fold) within the given time (let's say 15 seconds), user folds. In this case, remove user from user pool for games thereafter.
5. Assets are handled client-side. 
6. Flop, turn, and river should be shown using POST requests (every client should do this), maybe using GET request even.
7. Figure out how to handle if a user joins mid-game, maybe cache board cards for spectators?
8. GET request for showdown or if all users except one fold (should be fast enough)
9. Remember to re-render page after requests (not sure if done automatically, will have to test)
10. POST request as soon as game starts, to give client card data to server
11. GET request from users that are in the game but lost to show the winner's cards (only if showdown)
12. Start game API: toggle button on client if game has not started yet for (start game, with a #/# progress bar), server will have array of users ready, game starts when filled.
13. Start game API will double as an end game API, therefore will always be loaded
14. Make a waiting queue for the game, queue members can enter game after end of each round, or if game has not started yet

Poker Rules:
1. Button is the dealer (randomize this when a game begins), small blind and big blind are the next 2 players going clockwise respectively
2. Player directly clockwise to the big blind is under the gun (i.e. bets first)
3. In subsequent rounds (i.e. flop onwards), first active person clockwise of the button is under the gun first.
